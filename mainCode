/*
 * Omega BopIt Project
 * Greg Wagonblast, Ben Tanay, Brian Bianchi
 * This is the main file used for programming the microcontrollor.
 * 
 */

#include "LedControl.h"
#include "Time.h"
#define joyX A0
#define joyY A1

// Define an LED display object
LedControl mydisplay = LedControl(4, 2, 3, 1);

// Global variables
unsigned int count = 0;
unsigned int millisecondsForInput = 10000;
unsigned int score = 0;
unsigned int levelsPassed = 0;


void setup() {
  // Set serial frequency
  Serial.begin(9600);

  // Initialize pins for input and output
  // Output pins are for the LED's for the Joystick device
  // Input pins is for the button to start a new game and tilt sensor
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(13, INPUT);
  pinMode(7, INPUT);

  // Setup Display
  mydisplay.shutdown(0, false);  
  mydisplay.setIntensity(0, 4); // 15 = brightest 

  // Get Sccore in BCD and set display to starting screen
  score = HexToBCD(count);
  mydisplay.setChar(0, 7, ' ', false);
  mydisplay.setChar(0, 6, ' ', false);
  mydisplay.setChar(0, 5, 'P', false);
  mydisplay.setChar(0, 4, 'l', false);
  mydisplay.setChar(0, 3, 'a', false);
  mydisplay.setRow(0, 2, B0111011); // makes the letter Y
  mydisplay.setChar(0, 1, ' ', false);
  mydisplay.setChar(0, 0, ' ', false);

  // Seed random variables with unconnected A3 pin. This seeds the random variable using the 
  // noise from the unconnected pin.
  randomSeed(analogRead(A3));

  // Play a little melody
  for(int i = 1; i < 3; i++){
    tone(8,650,150);
    delay(300);
    tone(8,380,100);
    delay(150);
    tone(8,430,100);
    delay(150);
   }
  tone(8,650,150);
  delay(300);
  tone(8,750,150);
  delay(300);

  // Wait for button press to start game
  while(digitalRead(13) == LOW){
 
  }
  // This loop is used to ensure button press does not carry over into game
  while(digitalRead(13) == HIGH){
    
  }
  
}

// main loop
void loop() {

  // Get desired input using a random variable
  int whichFunction = random(1,4);

  // This loop is used to ensure inputs do not carry over into game
  while(digitalRead(13) == HIGH || analogRead(joyX) > 542 || analogRead(joyX) < 482 || analogRead(joyY) > 542 || analogRead(joyY) < 482){
    if(count == 9 && analogRead(joyY) > 542 && digitalRead(13) == HIGH){
      easterEggTone();
    }
  }
  delay(100);

  // Call whichever number was selected
  if(whichFunction == 1 ){ 
    // Call joystick function and play audio
    tone(8,300,260);
    delay(350);
    noTone(8);
    getJoyStickAndScore(millisecondsForInput);
  }else if(whichFunction == 2){ 
    // Call button function and play audio
    tone(8,565,260);
    delay(350);
    noTone(8);
    getButtonAndScore(millisecondsForInput);
  }else if(whichFunction == 3){
    // Call tilt function and play audio
    tone(8,825,260);
    delay(350);
    noTone(8);
    getTiltAndScore(millisecondsForInput);
  } else{
    endGame();
  }

  // Level passed
  levelsPassed++;
  
  // If the timer is above 1s and 5 levels have passed, decrease by 1 second for every level passed
  if(millisecondsForInput/1000 > 1 && levelsPassed == 10){
    millisecondsForInput = millisecondsForInput - 1000;
    levelsPassed = 0;
  }

  // User has won game if levels equal 99
  if(count == 99){
    winner();
  }

}


// This function converts decimal to BCD for the display
unsigned int HexToBCD(unsigned int number){
  unsigned char i = 0;
  unsigned int k = 0;
  
  while(number){
      k = (k) | ((number%10) << i*4);
      number = number / 10;
      i++;
    }
  return(k);
}


// This is the heart of the joystick input
void getJoyStickAndScore(int timer){

   // Randomly get a number between 1 and 4 to select an LED
   int whichLED = random(1,5);
   int givenTime = timer;

   // Get tilt status
   bool tiltStatus = digitalRead(7);

   // Boolean for assessing whether user passed
   bool passed = true;

   // First LED. All LED paths are similair. The difference is which x and y axis values are tested for correctness
   if(whichLED == 1){

     // Make LED high
     digitalWrite(9, HIGH);

     // While the user hasn't moved the joystick, decrease timer. The resting x and y axis value for each is 512. I give
     // a bit of a deadzone to decrease sensitivity. It takes time to read the joystick, therefore no delay is needed. If
     // timer gets to zero, they fail.
     while(analogRead(joyX) < 542 && analogRead(joyX) > 482 && analogRead(joyY) < 542 && analogRead(joyY) > 482 && timer != 0){
        updateScore(timer);
        timer= timer-2;
        if(digitalRead(13) == HIGH || tiltStatus != digitalRead(7)){
          passed = false;
          timer = 0;
        }
     }

     // Store x and y values since they're constantly changing
     int xAxis = analogRead(joyX);
     int yAxis = analogRead(joyY);

     // If joystick is in correct quadrant, the user was successful
     if(xAxis <= 482 && yAxis <= 560 && yAxis >= 460 && timer != 0){
        count++;
     }else{
      // User failed, set passed to false
      passed = false;
     }

     // Set LED low, update score and delay.
     digitalWrite(9, LOW);
     updateScore(timer);
     delay(1000);
   }

   if(whichLED == 2){
     digitalWrite(10, HIGH);

     while(analogRead(joyX) < 542 && analogRead(joyX) > 482 && analogRead(joyY) < 542 && analogRead(joyY) > 482 && timer != 0){
        updateScore(timer);
        timer= timer-2;
        if(digitalRead(13) == HIGH || tiltStatus != digitalRead(7)){
          passed = false;
          timer = 0;
        }
     }
     int xAxis = analogRead(joyX);
     int yAxis = analogRead(joyY);
     if(xAxis >= 542 && yAxis <= 560 && yAxis >= 460 && timer != 0){
        count++;
     }else{
      passed = false;
     }
     digitalWrite(10, LOW);
     updateScore(timer);
     delay(1000);
   }

   if(whichLED == 3){
     digitalWrite(11, HIGH);
     while(analogRead(joyX) < 542 && analogRead(joyX) > 482 && analogRead(joyY) < 542 && analogRead(joyY) > 482 && timer != 0){
        updateScore(timer);
        timer= timer-2;
        if(digitalRead(13) == HIGH || tiltStatus != digitalRead(7)){
          passed = false;
          timer = 0;
        }
     }
     int xAxis = analogRead(joyX);
     int yAxis = analogRead(joyY);
     if(yAxis >= 542 && xAxis <= 560 && xAxis >= 460 && timer != 0){
        count++;
     }else{
      passed = false;
     }
     digitalWrite(11, LOW);
     updateScore(timer);
     delay(1000);
   }

   if(whichLED == 4){
     digitalWrite(12, HIGH);
     while(analogRead(joyX) < 542 && analogRead(joyX) > 482 && analogRead(joyY) < 542 && analogRead(joyY) > 482 && timer != 0){
        updateScore(timer);
        timer= timer-2;
        if(digitalRead(13) == HIGH || tiltStatus != digitalRead(7)){
          passed = false;
          timer = 0;
        }
     }
     int xAxis = analogRead(joyX);
     int yAxis = analogRead(joyY);
     if(yAxis <= 482 && xAxis <= 560 && xAxis >= 460 && timer != 0){
        count++;
     }else{
      passed = false;
     }
     digitalWrite(12, LOW);
     updateScore(timer);
     delay(1000);
   }

  // User failed, calls endgame function
  if(passed == false){
    endGame();
  }
   
}

// This function gets the button input and updates score
void getButtonAndScore(int givenTime){
  
  // If score is above 50, random LEDs light up to throw user off
  // Randomly get a number to turn on LED
  int ledTrap = random(9,15);
  if(count > 50 && ledTrap > 8 && ledTrap < 13){
    digitalWrite(ledTrap, HIGH);
  }
  
  // Get tilt status
  bool tiltStatus = digitalRead(7);

  // Boolean variable to indicate if other inputs were detected
  bool wrongInput = false;
  
  // Wait for button press
  while(digitalRead(13) == LOW && givenTime > 0){
    updateScore(givenTime);
    givenTime = givenTime - 2;
    if(analogRead(joyX) > 542 || analogRead(joyX) < 482 || analogRead(joyY) > 542 || analogRead(joyY) < 482 || tiltStatus != digitalRead(7)){
      wrongInput == true;
      givenTime = 0;
    }
  }

  if(count > 50 && ledTrap > 8 && ledTrap < 13){
    digitalWrite(ledTrap, LOW);
  }
  
  // User failed, calls endgame function
  if(givenTime <= 0 || wrongInput == true){
    endGame();
  }else{
    count++;
    updateScore(givenTime);
    delay(1000);
  }

}


void getTiltAndScore(int givenTime){

  // Boolean variable to indicate if other inputs were detected
  bool wrongInput = false;
  
  // Read tilt and wait for it to flip
  bool tiltStatus = digitalRead(7);
  while(tiltStatus == digitalRead(7) && givenTime > 0){
    updateScore(givenTime);
    givenTime = givenTime - 2;
    if(analogRead(joyX) > 542 || analogRead(joyX) < 482 || analogRead(joyY) > 542 || analogRead(joyY) < 482 || digitalRead(13) == HIGH){
      wrongInput == true;
      givenTime = 0;
    }
  }

  // If user passed, increment score and continue
  if(givenTime > 0 && wrongInput == false){
    count++;
    updateScore(givenTime);
    delay(1000);
  }else{
    endGame();
  }
 }

// This function updates the score and time remaining for the challenge
void updateScore(int timeleft){

  // Get score in BCD and convert time left to seconds
  score = HexToBCD(count);
  timeleft = HexToBCD(timeleft/100);

  // Output on display
  mydisplay.setChar(0, 7, ' ', false);
  mydisplay.setChar(0, 6, ' ', false);
  mydisplay.setDigit(0, 5, ((timeleft>>4)&0x0F), false);
  mydisplay.setDigit(0, 4, (timeleft&0x0F), false);
  mydisplay.setChar(0, 3, ' ', false);
  mydisplay.setChar(0, 2, ' ', false);
  mydisplay.setDigit(0, 1, ((score>>4)&0x0F), false);
  mydisplay.setDigit(0, 0, (score&0x0F), false);
}

// End game. This gets called when the user fails
void endGame(){

  // Update score, timer, and display to end game screen
  score = HexToBCD(count);
  millisecondsForInput = 10000;
  mydisplay.setChar(0, 7, ' ', false);
  mydisplay.setChar(0, 6, ' ', false);
  mydisplay.setChar(0, 5, 'e', false);
  mydisplay.setChar(0, 4, 'n', false);
  mydisplay.setChar(0, 3, 'd', false);
  mydisplay.setChar(0, 2, ' ', false);
  mydisplay.setDigit(0, 1, ((score>>4)&0x0F), false);
  mydisplay.setDigit(0, 0, (score&0x0F), false);

  tone(8,465,200);
  delay(100);
  tone(8,425,225);
  delay(125);
  tone(8,350,300);
  delay(200);
  tone(8,270,600);
  delay(1550);

  
  //wait for button press to start game
  while(digitalRead(13) == LOW){
    
  }

  // Reset count and screen. Proceed back to loop
  count = 0;
  updateScore(millisecondsForInput);
  loop();
}


// End game for winner. This gets called when the user wins
void winner(){

  // Update score, timer, and display to end game winner screen
  score = HexToBCD(count);
  millisecondsForInput = 10000;


  mydisplay.setChar(0, 7, 'b', false);
  mydisplay.setChar(0, 6, '0', false);
  mydisplay.setChar(0, 5, 'p', false);
  mydisplay.setChar(0, 4, ' ', false);
  mydisplay.setChar(0, 3, ' ', false);
  mydisplay.setChar(0, 2, ' ', false);
  mydisplay.setDigit(0, 1, ((score>>4)&0x0F), false);
  mydisplay.setDigit(0, 0, (score&0x0F), false);
    
  // Play a little melody
  for(int i = 1; i < 3; i++){
    tone(8,650,150);
    delay(300);
    tone(8,380,100);
    delay(150);
    tone(8,430,100);
    delay(150);
   }
  tone(8,650,150);
  delay(300);
  tone(8,750,150);
  delay(300);
  tone(8,1020,80);
  delay(150);
  tone(8,1020,80);
  delay(300);

  // Wait for button to restart
  while(digitalRead(13) == LOW){

  }


  // Reset count and screen. Proceed back to loop
  count = 0;
  updateScore(millisecondsForInput);
  loop();
}


void easterEggTone(){
  tone(8,660,100);
  delay(150);
  tone(8,660,100);
  delay(300);
  tone(8,660,100);
  delay(300);
  tone(8,510,100);
  delay(100);
  tone(8,660,100);
  delay(300);
  tone(8,770,100);
  delay(550);
  tone(8,380,100);
  delay(575);
  
  tone(8,510,100);
  delay(450);
  tone(8,380,100);
  delay(400);
  tone(8,320,100);
  delay(500);
  tone(8,440,100);
  delay(300);
  tone(8,480,80);
  delay(330);
  tone(8,450,100);
  delay(150);
  tone(8,430,100);
  delay(300);
  tone(8,380,100);
  delay(200);
  tone(8,660,80);
  delay(200);
  tone(8,760,50);
  delay(150);
  tone(8,860,100);
  delay(300);
  tone(8,700,80);
  delay(150);
  tone(8,760,50);
  delay(350);
  tone(8,660,80);
  delay(300);
  tone(8,520,80);
  delay(150);
  tone(8,580,80);
  delay(150);
  tone(8,480,80);
  delay(500);
  
  tone(8,510,100);
  delay(450);
  tone(8,380,100);
  delay(400);
  tone(8,320,100);
  delay(500);
  tone(8,440,100);
  delay(300);
  tone(8,480,80);
  delay(330);
  tone(8,450,100);
  delay(150);
  tone(8,430,100);
  delay(300);
  tone(8,380,100);
  delay(200);
  tone(8,660,80);
  delay(200);
  tone(8,760,50);
  delay(150);
  tone(8,860,100);
  delay(300);
  tone(8,700,80);
  delay(150);
  tone(8,760,50);
  delay(350);
  tone(8,660,80);
  delay(300);
  tone(8,520,80);
  delay(150);
  tone(8,580,80);
  delay(150);
  tone(8,480,80);
  delay(500);
  
  tone(8,500,100);
  delay(300);
  
  tone(8,760,100);
  delay(100);
  tone(8,720,100);
  delay(150);
  tone(8,680,100);
  delay(150);
  tone(8,620,150);
  delay(300);
  
  tone(8,650,150);
  delay(300);
  tone(8,380,100);
  delay(150);
  tone(8,430,100);
  delay(150);
  
  tone(8,500,100);
  delay(300);
  tone(8,430,100);
  delay(150);
  tone(8,500,100);
  delay(100);
  tone(8,570,100);
  delay(220);
  
  tone(8,500,100);
  delay(300);
  
  tone(8,760,100);
  delay(100);
  tone(8,720,100);
  delay(150);
  tone(8,680,100);
  delay(150);
  tone(8,620,150);
  delay(300);
  
  tone(8,650,200);
  delay(300);
  
  tone(8,1020,80);
  delay(300);
  tone(8,1020,80);
  delay(150);
  tone(8,1020,80);
  delay(300);
  
  tone(8,380,100);
  delay(300);
  tone(8,500,100);
  delay(300);
  
  tone(8,760,100);
  delay(100);
  tone(8,720,100);
  delay(150);
  tone(8,680,100);
  delay(150);
  tone(8,620,150);
  delay(300);
  
  tone(8,650,150);
  delay(300);
  tone(8,380,100);
  delay(150);
  tone(8,430,100);
  delay(150);
  
  tone(8,500,100);
  delay(300);
  tone(8,430,100);
  delay(150);
  tone(8,500,100);
  delay(100);
  tone(8,570,100);
  delay(420);
  
  tone(8,585,100);
  delay(450);
  
  tone(8,550,100);
  delay(420);
  
  tone(8,500,100);
  delay(360);
  
  tone(8,380,100);
  delay(300);
  tone(8,500,100);
  delay(300);
  tone(8,500,100);
  delay(150);
  tone(8,500,100);
  delay(300);
  
  tone(8,500,100);
  delay(300);
  
  tone(8,760,100);
  delay(100);
  tone(8,720,100);
  delay(150);
  tone(8,680,100);
  delay(150);
  tone(8,620,150);
  delay(300);
  
  tone(8,650,150);
  delay(300);
  tone(8,380,100);
  delay(150);
  tone(8,430,100);
  delay(150);
  
  tone(8,500,100);
  delay(300);
  tone(8,430,100);
  delay(150);
  tone(8,500,100);
  delay(100);
  tone(8,570,100);
  delay(220);
  
  tone(8,500,100);
  delay(300);
  
  tone(8,760,100);
  delay(100);
  tone(8,720,100);
  delay(150);
  tone(8,680,100);
  delay(150);
  tone(8,620,150);
  delay(300);
  
  tone(8,650,200);
  delay(300);
  
  tone(8,1020,80);
  delay(300);
  tone(8,1020,80);
  delay(150);
  tone(8,1020,80);
  delay(300);
  
  tone(8,380,100);
  delay(300);
  tone(8,500,100);
  delay(300);
  
  tone(8,760,100);
  delay(100);
  tone(8,720,100);
  delay(150);
  tone(8,680,100);
  delay(150);
  tone(8,620,150);
  delay(300);
  
  tone(8,650,150);
  delay(300);
  tone(8,380,100);
  delay(150);
  tone(8,430,100);
  delay(150);
  
  tone(8,500,100);
  delay(300);
  tone(8,430,100);
  delay(150);
  tone(8,500,100);
  delay(100);
  tone(8,570,100);
  delay(420);
  
  tone(8,585,100);
  delay(450);
  
  tone(8,550,100);
  delay(420);
  
  tone(8,500,100);
  delay(360);
  
  tone(8,380,100);
  delay(300);
  tone(8,500,100);
  delay(300);
  tone(8,500,100);
  delay(150);
  tone(8,500,100);
  delay(300);
  
  tone(8,500,60);
  delay(150);
  tone(8,500,80);
  delay(300);
  tone(8,500,60);
  delay(350);
  tone(8,500,80);
  delay(150);
  tone(8,580,80);
  delay(350);
  tone(8,660,80);
  delay(150);
  tone(8,500,80);
  delay(300);
  tone(8,430,80);
  delay(150);
  tone(8,380,80);
  delay(600);
  
  tone(8,500,60);
  delay(150);
  tone(8,500,80);
  delay(300);
  tone(8,500,60);
  delay(350);
  tone(8,500,80);
  delay(150);
  tone(8,580,80);
  delay(150);
  tone(8,660,80);
  delay(550);
  
  tone(8,870,80);
  delay(325);
  tone(8,760,80);
  delay(600);
  
  tone(8,500,60);
  delay(150);
  tone(8,500,80);
  delay(300);
  tone(8,500,60);
  delay(350);
  tone(8,500,80);
  delay(150);
  tone(8,580,80);
  delay(350);
  tone(8,660,80);
  delay(150);
  tone(8,500,80);
  delay(300);
  tone(8,430,80);
  delay(150);
  tone(8,380,80);
  delay(600);
  
  tone(8,660,100);
  delay(150);
  tone(8,660,100);
  delay(300);
  tone(8,660,100);
  delay(300);
  tone(8,510,100);
  delay(100);
  tone(8,660,100);
  delay(300);
  tone(8,770,100);
  delay(550);
  tone(8,380,100);
  delay(575);
}
